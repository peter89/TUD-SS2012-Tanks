<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<!--NewPage-->
<HTML>
<HEAD>
<!-- Generated by javadoc (build 1.5.0_13) on Mon Jan 21 14:17:12 CET 2008 -->
<TITLE>
TranslatableGUIElement
</TITLE>

<META NAME="keywords" CONTENT="translator.TranslatableGUIElement class">

<LINK REL ="stylesheet" TYPE="text/css" HREF="../stylesheet.css" TITLE="Style">

<SCRIPT type="text/javascript">
function windowTitle()
{
    parent.document.title="TranslatableGUIElement";
}
</SCRIPT>
<NOSCRIPT>
</NOSCRIPT>

</HEAD>

<BODY BGCOLOR="white" onload="windowTitle();">


<!-- ========= START OF TOP NAVBAR ======= -->
<A NAME="navbar_top"><!-- --></A>
<A HREF="#skip-navbar_top" title="Skip navigation links"></A>
<TABLE BORDER="0" WIDTH="100%" CELLPADDING="1" CELLSPACING="0" SUMMARY="">
<TR>
<TD COLSPAN=2 BGCOLOR="#EEEEFF" CLASS="NavBarCell1">
<A NAME="navbar_top_firstrow"><!-- --></A>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="3" SUMMARY="">
  <TR ALIGN="center" VALIGN="top">
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../translator/package-summary.html"><FONT CLASS="NavBarFont1"><B>Package</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#FFFFFF" CLASS="NavBarCell1Rev"> &nbsp;<FONT CLASS="NavBarFont1Rev"><B>Class</B></FONT>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="class-use/TranslatableGUIElement.html"><FONT CLASS="NavBarFont1"><B>Use</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="package-tree.html"><FONT CLASS="NavBarFont1"><B>Tree</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../deprecated-list.html"><FONT CLASS="NavBarFont1"><B>Deprecated</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../index-files/index-1.html"><FONT CLASS="NavBarFont1"><B>Index</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../help-doc.html"><FONT CLASS="NavBarFont1"><B>Help</B></FONT></A>&nbsp;</TD>
  </TR>
</TABLE>
</TD>
<TD ALIGN="right" VALIGN="top" ROWSPAN=3><EM>
</EM>
</TD>
</TR>

<TR>
<TD BGCOLOR="white" CLASS="NavBarCell2"><FONT SIZE="-2">
&nbsp;<A HREF="../translator/StaticExtendedResourceBundle.html" title="class in translator"><B>PREV CLASS</B></A>&nbsp;
&nbsp;<A HREF="../translator/Translator.html" title="class in translator"><B>NEXT CLASS</B></A></FONT></TD>
<TD BGCOLOR="white" CLASS="NavBarCell2"><FONT SIZE="-2">
  <A HREF="../index.html?translator/TranslatableGUIElement.html" target="_top"><B>FRAMES</B></A>  &nbsp;
&nbsp;<A HREF="TranslatableGUIElement.html" target="_top"><B>NO FRAMES</B></A>  &nbsp;
&nbsp;<SCRIPT type="text/javascript">
  <!--
  if(window==top) {
    document.writeln('<A HREF="../allclasses-noframe.html"><B>All Classes</B></A>');
  }
  //-->
</SCRIPT>
<NOSCRIPT>
  <A HREF="../allclasses-noframe.html"><B>All Classes</B></A>
</NOSCRIPT>


</FONT></TD>
</TR>
<TR>
<TD VALIGN="top" CLASS="NavBarCell3"><FONT SIZE="-2">
  SUMMARY:&nbsp;NESTED&nbsp;|&nbsp;FIELD&nbsp;|&nbsp;<A HREF="#constructor_summary">CONSTR</A>&nbsp;|&nbsp;<A HREF="#method_summary">METHOD</A></FONT></TD>
<TD VALIGN="top" CLASS="NavBarCell3"><FONT SIZE="-2">
DETAIL:&nbsp;FIELD&nbsp;|&nbsp;<A HREF="#constructor_detail">CONSTR</A>&nbsp;|&nbsp;<A HREF="#method_detail">METHOD</A></FONT></TD>
</TR>
</TABLE>
<A NAME="skip-navbar_top"></A>
<!-- ========= END OF TOP NAVBAR ========= -->

<HR>
<!-- ======== START OF CLASS DATA ======== -->
<H2>
<FONT SIZE="-1">
translator</FONT>
<BR>
Class TranslatableGUIElement</H2>
<PRE>
java.lang.Object
  <IMG SRC="../resources/inherit.gif" ALT="extended by "><B>translator.TranslatableGUIElement</B>
</PRE>
<DL>
<DT><B>Direct Known Subclasses:</B> <DD><A HREF="../translator/AnimalSpecificTranslatableGUIElement.html" title="class in translator">AnimalSpecificTranslatableGUIElement</A></DD>
</DL>
<HR>
<DL>
<DT><PRE>public class <B>TranslatableGUIElement</B><DT>extends java.lang.Object</DL>
</PRE>

<P>
Provides a common interface for translatable GUI element generation Requires
 an appropriate resource file containing the message translations.
<P>

<P>
<DL>
<DT><B>Version:</B></DT>
  <DD>1.1 2000-01-11</DD>
<DT><B>Author:</B></DT>
  <DD>Guido R&ouml;&szlig;ling (<a href="mailto:roessling@acm.org">
         roessling@acm.org</a>)</DD>
</DL>
<HR>

<P>

<!-- ======== CONSTRUCTOR SUMMARY ======== -->

<A NAME="constructor_summary"><!-- --></A>
<TABLE BORDER="1" WIDTH="100%" CELLPADDING="3" CELLSPACING="0" SUMMARY="">
<TR BGCOLOR="#CCCCFF" CLASS="TableHeadingColor">
<TH ALIGN="left" COLSPAN="2"><FONT SIZE="+2">
<B>Constructor Summary</B></FONT></TH>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD><CODE><B><A HREF="../translator/TranslatableGUIElement.html#TranslatableGUIElement(translator.Translator)">TranslatableGUIElement</A></B>(<A HREF="../translator/Translator.html" title="class in translator">Translator</A>&nbsp;t)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Generate a new GUI generator using the concrete Translator passed in</TD>
</TR>
</TABLE>
&nbsp;
<!-- ========== METHOD SUMMARY =========== -->

<A NAME="method_summary"><!-- --></A>
<TABLE BORDER="1" WIDTH="100%" CELLPADDING="3" CELLSPACING="0" SUMMARY="">
<TR BGCOLOR="#CCCCFF" CLASS="TableHeadingColor">
<TH ALIGN="left" COLSPAN="2"><FONT SIZE="+2">
<B>Method Summary</B></FONT></TH>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;<A HREF="../translator/ExtendedAction.html" title="class in translator">ExtendedAction</A></CODE></FONT></TD>
<TD><CODE><B><A HREF="../translator/TranslatableGUIElement.html#generateAction(java.lang.String, java.lang.Object[], java.lang.Object, java.lang.Object[], boolean)">generateAction</A></B>(java.lang.String&nbsp;key,
               java.lang.Object[]&nbsp;params,
               java.lang.Object&nbsp;invocationTargetObject,
               java.lang.Object[]&nbsp;args,
               boolean&nbsp;isButton)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Method for generating a new ExtendedAction insertable to a ToolBar or Menu</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;<A HREF="../translator/ExtendedActionButton.html" title="class in translator">ExtendedActionButton</A></CODE></FONT></TD>
<TD><CODE><B><A HREF="../translator/TranslatableGUIElement.html#generateActionButton(java.lang.String, javax.swing.Action)">generateActionButton</A></B>(java.lang.String&nbsp;key,
                     javax.swing.Action&nbsp;theAction)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Generate a button encapsulating a predefined Action element</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;<A HREF="../translator/ExtendedActionButton.html" title="class in translator">ExtendedActionButton</A></CODE></FONT></TD>
<TD><CODE><B><A HREF="../translator/TranslatableGUIElement.html#generateActionButton(java.lang.String, java.lang.Object[], javax.swing.Action)">generateActionButton</A></B>(java.lang.String&nbsp;key,
                     java.lang.Object[]&nbsp;params,
                     javax.swing.Action&nbsp;theAction)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Generate a button encapsulating a predefined Action element</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;javax.swing.border.Border</CODE></FONT></TD>
<TD><CODE><B><A HREF="../translator/TranslatableGUIElement.html#generateBorder(java.lang.String, java.lang.Object[])">generateBorder</A></B>(java.lang.String&nbsp;key,
               java.lang.Object[]&nbsp;params)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;javax.swing.Box</CODE></FONT></TD>
<TD><CODE><B><A HREF="../translator/TranslatableGUIElement.html#generateBorderedBox(int, java.lang.String)">generateBorderedBox</A></B>(int&nbsp;alignment,
                    java.lang.String&nbsp;key)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Generates a bordered JPanel with the proper label</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;javax.swing.Box</CODE></FONT></TD>
<TD><CODE><B><A HREF="../translator/TranslatableGUIElement.html#generateBorderedBox(int, java.lang.String, java.lang.Object[])">generateBorderedBox</A></B>(int&nbsp;alignment,
                    java.lang.String&nbsp;key,
                    java.lang.Object[]&nbsp;params)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Generates a bordered JPanel with the proper label</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;javax.swing.JPanel</CODE></FONT></TD>
<TD><CODE><B><A HREF="../translator/TranslatableGUIElement.html#generateBorderedJPanel(java.lang.String)">generateBorderedJPanel</A></B>(java.lang.String&nbsp;key)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Generates a bordered JPanel with the proper label</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;javax.swing.JPanel</CODE></FONT></TD>
<TD><CODE><B><A HREF="../translator/TranslatableGUIElement.html#generateBorderedJPanel(java.lang.String, java.lang.Object[])">generateBorderedJPanel</A></B>(java.lang.String&nbsp;key,
                       java.lang.Object[]&nbsp;params)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Generates a bordered JPanel with the proper label</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;javax.swing.AbstractButton</CODE></FONT></TD>
<TD><CODE><B><A HREF="../translator/TranslatableGUIElement.html#generateJButton(java.lang.String)">generateJButton</A></B>(java.lang.String&nbsp;key)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Convenience wrapper for generating a new JButton Internally invokes
 generateJButton(key, null, false)</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;javax.swing.AbstractButton</CODE></FONT></TD>
<TD><CODE><B><A HREF="../translator/TranslatableGUIElement.html#generateJButton(java.lang.String, java.lang.Object[], boolean)">generateJButton</A></B>(java.lang.String&nbsp;key,
                java.lang.Object[]&nbsp;params,
                boolean&nbsp;isToggleButton)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Method for generating a new JButton</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;javax.swing.AbstractButton</CODE></FONT></TD>
<TD><CODE><B><A HREF="../translator/TranslatableGUIElement.html#generateJButton(java.lang.String, java.lang.Object[], boolean, java.awt.event.ActionListener)">generateJButton</A></B>(java.lang.String&nbsp;key,
                java.lang.Object[]&nbsp;params,
                boolean&nbsp;isToggleButton,
                java.awt.event.ActionListener&nbsp;listener)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Method for generating a new JButton</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;javax.swing.AbstractButton</CODE></FONT></TD>
<TD><CODE><B><A HREF="../translator/TranslatableGUIElement.html#generateJButton(java.lang.String, java.lang.Object[], boolean, java.awt.event.ActionListener, boolean)">generateJButton</A></B>(java.lang.String&nbsp;key,
                java.lang.Object[]&nbsp;params,
                boolean&nbsp;isToggleButton,
                java.awt.event.ActionListener&nbsp;listener,
                boolean&nbsp;hideLabel)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Method for generating a new JButton</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;javax.swing.JCheckBox</CODE></FONT></TD>
<TD><CODE><B><A HREF="../translator/TranslatableGUIElement.html#generateJCheckBox(java.lang.String)">generateJCheckBox</A></B>(java.lang.String&nbsp;key)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Convenience wrapper for generating a new JButton Internally invokes
 generateJButton(key, null, false)</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;javax.swing.JCheckBox</CODE></FONT></TD>
<TD><CODE><B><A HREF="../translator/TranslatableGUIElement.html#generateJCheckBox(java.lang.String, java.lang.Object[], java.awt.event.ActionListener)">generateJCheckBox</A></B>(java.lang.String&nbsp;key,
                  java.lang.Object[]&nbsp;params,
                  java.awt.event.ActionListener&nbsp;listener)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Method for generating a new JCheckBox</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;javax.swing.JComboBox</CODE></FONT></TD>
<TD><CODE><B><A HREF="../translator/TranslatableGUIElement.html#generateJComboBox(java.lang.String, java.lang.Object[], java.lang.String[])">generateJComboBox</A></B>(java.lang.String&nbsp;key,
                  java.lang.Object[]&nbsp;params,
                  java.lang.String[]&nbsp;labels)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Convenience wrapper for generating a new JComboBox Internally invokes
 generateJComboBox(key, params, labels, labels[0])</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;javax.swing.JComboBox</CODE></FONT></TD>
<TD><CODE><B><A HREF="../translator/TranslatableGUIElement.html#generateJComboBox(java.lang.String, java.lang.Object[], java.lang.String[], java.lang.String)">generateJComboBox</A></B>(java.lang.String&nbsp;key,
                  java.lang.Object[]&nbsp;params,
                  java.lang.String[]&nbsp;labels,
                  java.lang.String&nbsp;selectedItem)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Method for generating a new JComboBox</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;javax.swing.JFrame</CODE></FONT></TD>
<TD><CODE><B><A HREF="../translator/TranslatableGUIElement.html#generateJFrame(java.lang.String)">generateJFrame</A></B>(java.lang.String&nbsp;key)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Method for generating a new JFrame</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;javax.swing.JLabel</CODE></FONT></TD>
<TD><CODE><B><A HREF="../translator/TranslatableGUIElement.html#generateJLabel(java.lang.String)">generateJLabel</A></B>(java.lang.String&nbsp;key)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Convenience wrapper for generating a new JLabel Internally invokes
 generateJLabel(key, null)</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;javax.swing.JLabel</CODE></FONT></TD>
<TD><CODE><B><A HREF="../translator/TranslatableGUIElement.html#generateJLabel(java.lang.String, java.lang.Object[])">generateJLabel</A></B>(java.lang.String&nbsp;key,
               java.lang.Object[]&nbsp;params)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Method for generating a new JLabel</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;javax.swing.JList</CODE></FONT></TD>
<TD><CODE><B><A HREF="../translator/TranslatableGUIElement.html#generateJList(java.lang.String, java.lang.Object[], java.lang.Object[], int, javax.swing.event.ListSelectionListener, int)">generateJList</A></B>(java.lang.String&nbsp;key,
              java.lang.Object[]&nbsp;params,
              java.lang.Object[]&nbsp;labels,
              int&nbsp;selectionMode,
              javax.swing.event.ListSelectionListener&nbsp;listener,
              int&nbsp;selectedIndex)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Method for generating a new JList</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;javax.swing.JMenu</CODE></FONT></TD>
<TD><CODE><B><A HREF="../translator/TranslatableGUIElement.html#generateJMenu(java.lang.String)">generateJMenu</A></B>(java.lang.String&nbsp;key)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Convenience wrapper for generating a new JMenu Internally invokes
 generateJMenu(key, null)</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;javax.swing.JMenu</CODE></FONT></TD>
<TD><CODE><B><A HREF="../translator/TranslatableGUIElement.html#generateJMenu(java.lang.String, java.lang.Object[])">generateJMenu</A></B>(java.lang.String&nbsp;key,
              java.lang.Object[]&nbsp;params)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Method for generating a new JMenu</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;javax.swing.JMenuItem</CODE></FONT></TD>
<TD><CODE><B><A HREF="../translator/TranslatableGUIElement.html#generateJMenuItem(java.lang.String)">generateJMenuItem</A></B>(java.lang.String&nbsp;key)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Convenience wrapper for generating a new JMenuItem Internally invokes
 generateJMenuItem(key, null)</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;javax.swing.JMenuItem</CODE></FONT></TD>
<TD><CODE><B><A HREF="../translator/TranslatableGUIElement.html#generateJMenuItem(java.lang.String, boolean)">generateJMenuItem</A></B>(java.lang.String&nbsp;key,
                  boolean&nbsp;useIcon)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Convenience wrapper for generating a new JMenuItem Internally invokes
 generateJMenuItem(key, null)</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;javax.swing.JMenuItem</CODE></FONT></TD>
<TD><CODE><B><A HREF="../translator/TranslatableGUIElement.html#generateJMenuItem(java.lang.String, java.lang.Object[])">generateJMenuItem</A></B>(java.lang.String&nbsp;key,
                  java.lang.Object[]&nbsp;params)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Method for generating a new JMenuItem</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;javax.swing.JMenuItem</CODE></FONT></TD>
<TD><CODE><B><A HREF="../translator/TranslatableGUIElement.html#generateJMenuItem(java.lang.String, java.lang.Object[], boolean)">generateJMenuItem</A></B>(java.lang.String&nbsp;key,
                  java.lang.Object[]&nbsp;params,
                  boolean&nbsp;useIcon)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Method for generating a new JMenuItem</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;javax.swing.JPopupMenu</CODE></FONT></TD>
<TD><CODE><B><A HREF="../translator/TranslatableGUIElement.html#generateJPopupMenu(java.lang.String)">generateJPopupMenu</A></B>(java.lang.String&nbsp;key)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Method for generating a new JPopupMenu</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;javax.swing.JSlider</CODE></FONT></TD>
<TD><CODE><B><A HREF="../translator/TranslatableGUIElement.html#generateJSlider(java.lang.String, java.lang.Object[], int, int, javax.swing.event.ChangeListener)">generateJSlider</A></B>(java.lang.String&nbsp;key,
                java.lang.Object[]&nbsp;params,
                int&nbsp;min,
                int&nbsp;max,
                javax.swing.event.ChangeListener&nbsp;listener)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Convenience wrapper for generating a new JSlider Internally invokes
 generateJSlider(key, params, min, max, min, (max-min)/5, (max-min)/20,
 false, listener)</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;javax.swing.JSlider</CODE></FONT></TD>
<TD><CODE><B><A HREF="../translator/TranslatableGUIElement.html#generateJSlider(java.lang.String, java.lang.Object[], int, int, int, boolean, javax.swing.event.ChangeListener)">generateJSlider</A></B>(java.lang.String&nbsp;key,
                java.lang.Object[]&nbsp;params,
                int&nbsp;min,
                int&nbsp;max,
                int&nbsp;defaultValue,
                boolean&nbsp;snapMode,
                javax.swing.event.ChangeListener&nbsp;listener)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Convenience wrapper for generating a new JSlider Internally invokes
 generateJSlider(key, params, min, max, defaultValue, (max-min)/5,
 (max-min)/20, false, listener)</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;javax.swing.JSlider</CODE></FONT></TD>
<TD><CODE><B><A HREF="../translator/TranslatableGUIElement.html#generateJSlider(java.lang.String, java.lang.Object[], int, int, int, int, int, boolean, javax.swing.event.ChangeListener)">generateJSlider</A></B>(java.lang.String&nbsp;key,
                java.lang.Object[]&nbsp;params,
                int&nbsp;min,
                int&nbsp;max,
                int&nbsp;defaultValue,
                int&nbsp;majorSpacing,
                int&nbsp;minorSpacing,
                boolean&nbsp;snapMode,
                javax.swing.event.ChangeListener&nbsp;listener)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Method for generating a new JSlider</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;javax.swing.JTextField</CODE></FONT></TD>
<TD><CODE><B><A HREF="../translator/TranslatableGUIElement.html#generateJTextField(java.lang.String, java.lang.Object[], int, java.lang.String)">generateJTextField</A></B>(java.lang.String&nbsp;key,
                   java.lang.Object[]&nbsp;params,
                   int&nbsp;width,
                   java.lang.String&nbsp;defaultText)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Method for generating a new JTextField</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;javax.swing.JToggleButton</CODE></FONT></TD>
<TD><CODE><B><A HREF="../translator/TranslatableGUIElement.html#generateJToggleButton(java.lang.String, java.lang.Object[], java.awt.event.ActionListener, boolean)">generateJToggleButton</A></B>(java.lang.String&nbsp;key,
                      java.lang.Object[]&nbsp;params,
                      java.awt.event.ActionListener&nbsp;listener,
                      boolean&nbsp;isRadioButton)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;javax.swing.border.Border</CODE></FONT></TD>
<TD><CODE><B><A HREF="../translator/TranslatableGUIElement.html#generateTitledBorder(java.lang.String)">generateTitledBorder</A></B>(java.lang.String&nbsp;key)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;javax.swing.JMenuItem</CODE></FONT></TD>
<TD><CODE><B><A HREF="../translator/TranslatableGUIElement.html#generateToggleableJMenuItem(java.lang.String, java.lang.Object[], boolean)">generateToggleableJMenuItem</A></B>(java.lang.String&nbsp;key,
                            java.lang.Object[]&nbsp;params,
                            boolean&nbsp;isCheckBox)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Convenience wrapper for generating a new toggleable JMenuItem Internally
 invokes generateToggleableJMenuItem(key, params, isCheckBox, false)</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;javax.swing.JMenuItem</CODE></FONT></TD>
<TD><CODE><B><A HREF="../translator/TranslatableGUIElement.html#generateToggleableJMenuItem(java.lang.String, java.lang.Object[], boolean, boolean)">generateToggleableJMenuItem</A></B>(java.lang.String&nbsp;key,
                            java.lang.Object[]&nbsp;params,
                            boolean&nbsp;isCheckBox,
                            boolean&nbsp;isSelected)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Method for generating a new toggleable JMenuItem</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;javax.swing.ImageIcon</CODE></FONT></TD>
<TD><CODE><B><A HREF="../translator/TranslatableGUIElement.html#getImageIcon(java.lang.String)">getImageIcon</A></B>(java.lang.String&nbsp;name)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;returns the imageIcon with the given name.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;javax.swing.AbstractButton</CODE></FONT></TD>
<TD><CODE><B><A HREF="../translator/TranslatableGUIElement.html#insertToMenu(java.lang.String, java.lang.Object[], java.lang.Object, java.lang.Object[], javax.swing.JMenu)">insertToMenu</A></B>(java.lang.String&nbsp;key,
             java.lang.Object[]&nbsp;params,
             java.lang.Object&nbsp;invocationTargetObject,
             java.lang.Object[]&nbsp;args,
             javax.swing.JMenu&nbsp;menu)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Convenience method for adding a new element to a menu Internally invokes
 insertMenuToolBar(key, params, invocationTargetObject, args, menu, null)</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;javax.swing.AbstractButton</CODE></FONT></TD>
<TD><CODE><B><A HREF="../translator/TranslatableGUIElement.html#insertToMenuAndToolBar(java.lang.String, java.lang.Object[], java.lang.Object, java.lang.Object[], javax.swing.JMenu, javax.swing.JToolBar)">insertToMenuAndToolBar</A></B>(java.lang.String&nbsp;key,
                       java.lang.Object[]&nbsp;params,
                       java.lang.Object&nbsp;invocationTargetObject,
                       java.lang.Object[]&nbsp;args,
                       javax.swing.JMenu&nbsp;menu,
                       javax.swing.JToolBar&nbsp;toolBar)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Convenience method for adding a new element to a menu and toolbar
 Internally invokes insertMenuToolBar(key, params, invocationTargetObject,
 args, menu, toolBar)</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;javax.swing.AbstractButton</CODE></FONT></TD>
<TD><CODE><B><A HREF="../translator/TranslatableGUIElement.html#insertToMenuAndToolBar(java.lang.String, java.lang.Object[], java.lang.Object, java.lang.Object[], javax.swing.JPopupMenu, javax.swing.JToolBar)">insertToMenuAndToolBar</A></B>(java.lang.String&nbsp;key,
                       java.lang.Object[]&nbsp;params,
                       java.lang.Object&nbsp;invocationTargetObject,
                       java.lang.Object[]&nbsp;args,
                       javax.swing.JPopupMenu&nbsp;menu,
                       javax.swing.JToolBar&nbsp;toolBar)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Convenience method for adding a new element to a popup menu and toolbar
 Internally invokes insertMenuToolBar(key, params, invocationTargetObject,
 args, menu, toolBar)</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;javax.swing.AbstractButton</CODE></FONT></TD>
<TD><CODE><B><A HREF="../translator/TranslatableGUIElement.html#insertToPopupMenu(java.lang.String, java.lang.Object[], java.lang.Object, java.lang.Object[], javax.swing.JPopupMenu)">insertToPopupMenu</A></B>(java.lang.String&nbsp;key,
                  java.lang.Object[]&nbsp;params,
                  java.lang.Object&nbsp;invocationTargetObject,
                  java.lang.Object[]&nbsp;args,
                  javax.swing.JPopupMenu&nbsp;menu)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Convenience method for adding a new element to a popup menu Internally
 invokes insertMenuToolBar(key, params, invocationTargetObject, args, menu,
 null)</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;javax.swing.AbstractButton</CODE></FONT></TD>
<TD><CODE><B><A HREF="../translator/TranslatableGUIElement.html#insertToToolBar(java.lang.String, java.lang.Object[], java.lang.Object, java.lang.Object[], javax.swing.JToolBar)">insertToToolBar</A></B>(java.lang.String&nbsp;key,
                java.lang.Object[]&nbsp;params,
                java.lang.Object&nbsp;invocationTargetObject,
                java.lang.Object[]&nbsp;args,
                javax.swing.JToolBar&nbsp;toolBar)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Convenience method for adding a new element to a toolbar Internally invokes
 insertMenuToolBar(key, params, invocationTargetObject, args, null, toolBar)</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../translator/TranslatableGUIElement.html#insertTranslatableTab(java.lang.String, java.awt.Component, javax.swing.JTabbedPane)">insertTranslatableTab</A></B>(java.lang.String&nbsp;tabKey,
                      java.awt.Component&nbsp;component,
                      javax.swing.JTabbedPane&nbsp;tabbedPane)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../translator/TranslatableGUIElement.html#insertTranslatableTab(java.lang.String, java.lang.Object[], java.awt.Component, javax.swing.JTabbedPane)">insertTranslatableTab</A></B>(java.lang.String&nbsp;tabKey,
                      java.lang.Object[]&nbsp;params,
                      java.awt.Component&nbsp;component,
                      javax.swing.JTabbedPane&nbsp;tabbedPane)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../translator/TranslatableGUIElement.html#setGraphicsPath(java.lang.String)">setGraphicsPath</A></B>(java.lang.String&nbsp;path)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../translator/TranslatableGUIElement.html#setTranslator(translator.Translator)">setTranslator</A></B>(<A HREF="../translator/Translator.html" title="class in translator">Translator</A>&nbsp;t)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../translator/TranslatableGUIElement.html#translateGUIElements()">translateGUIElements</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Translate all registered components using the resource file</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../translator/TranslatableGUIElement.html#unregisterComponent(java.lang.String, java.awt.Component)">unregisterComponent</A></B>(java.lang.String&nbsp;key,
                    java.awt.Component&nbsp;component)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</TD>
</TR>
</TABLE>
&nbsp;<A NAME="methods_inherited_from_class_java.lang.Object"><!-- --></A>
<TABLE BORDER="1" WIDTH="100%" CELLPADDING="3" CELLSPACING="0" SUMMARY="">
<TR BGCOLOR="#EEEEFF" CLASS="TableSubHeadingColor">
<TH ALIGN="left"><B>Methods inherited from class java.lang.Object</B></TH>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD><CODE>equals, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait</CODE></TD>
</TR>
</TABLE>
&nbsp;
<P>

<!-- ========= CONSTRUCTOR DETAIL ======== -->

<A NAME="constructor_detail"><!-- --></A>
<TABLE BORDER="1" WIDTH="100%" CELLPADDING="3" CELLSPACING="0" SUMMARY="">
<TR BGCOLOR="#CCCCFF" CLASS="TableHeadingColor">
<TH ALIGN="left" COLSPAN="1"><FONT SIZE="+2">
<B>Constructor Detail</B></FONT></TH>
</TR>
</TABLE>

<A NAME="TranslatableGUIElement(translator.Translator)"><!-- --></A><H3>
TranslatableGUIElement</H3>
<PRE>
public <B>TranslatableGUIElement</B>(<A HREF="../translator/Translator.html" title="class in translator">Translator</A>&nbsp;t)</PRE>
<DL>
<DD>Generate a new GUI generator using the concrete Translator passed in
<P>
<DL>
<DT><B>Parameters:</B><DD><CODE>t</CODE> - the current Translator for this object</DL>
</DL>

<!-- ============ METHOD DETAIL ========== -->

<A NAME="method_detail"><!-- --></A>
<TABLE BORDER="1" WIDTH="100%" CELLPADDING="3" CELLSPACING="0" SUMMARY="">
<TR BGCOLOR="#CCCCFF" CLASS="TableHeadingColor">
<TH ALIGN="left" COLSPAN="1"><FONT SIZE="+2">
<B>Method Detail</B></FONT></TH>
</TR>
</TABLE>

<A NAME="getImageIcon(java.lang.String)"><!-- --></A><H3>
getImageIcon</H3>
<PRE>
public javax.swing.ImageIcon <B>getImageIcon</B>(java.lang.String&nbsp;name)</PRE>
<DL>
<DD>returns the imageIcon with the given name.
<P>
<DD><DL>

<DT><B>Returns:</B><DD><b>null</b> if the Icon could not be found or read, <br>
         the Icon otherwise.</DL>
</DD>
</DL>
<HR>

<A NAME="setGraphicsPath(java.lang.String)"><!-- --></A><H3>
setGraphicsPath</H3>
<PRE>
public void <B>setGraphicsPath</B>(java.lang.String&nbsp;path)</PRE>
<DL>
<DD><DL>
</DL>
</DD>
</DL>
<HR>

<A NAME="setTranslator(translator.Translator)"><!-- --></A><H3>
setTranslator</H3>
<PRE>
public void <B>setTranslator</B>(<A HREF="../translator/Translator.html" title="class in translator">Translator</A>&nbsp;t)</PRE>
<DL>
<DD><DL>
</DL>
</DD>
</DL>
<HR>

<A NAME="generateAction(java.lang.String, java.lang.Object[], java.lang.Object, java.lang.Object[], boolean)"><!-- --></A><H3>
generateAction</H3>
<PRE>
public <A HREF="../translator/ExtendedAction.html" title="class in translator">ExtendedAction</A> <B>generateAction</B>(java.lang.String&nbsp;key,
                                     java.lang.Object[]&nbsp;params,
                                     java.lang.Object&nbsp;invocationTargetObject,
                                     java.lang.Object[]&nbsp;args,
                                     boolean&nbsp;isButton)</PRE>
<DL>
<DD>Method for generating a new ExtendedAction insertable to a ToolBar or Menu
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>key</CODE> - the key for the ExtendedAction<DD><CODE>params</CODE> - the objects used for determining the message -- see
          Translator.translateMessage(String, Object[])<DD><CODE>invocationTargetObject</CODE> - the object on which the method defined in the resource file is to
          be executed<DD><CODE>args</CODE> - the arguments for the method call<DD><CODE>isButton</CODE> - if true, generate without label ("button" semantics)
<DT><B>Returns:</B><DD>the generated ExtendedAction<DT><B>See Also:</B><DD><A HREF="../translator/Translator.html#translateMessage(java.lang.String, java.lang.Object[])"><CODE>Translator.translateMessage(String, Object[])</CODE></A></DL>
</DD>
</DL>
<HR>

<A NAME="generateActionButton(java.lang.String, javax.swing.Action)"><!-- --></A><H3>
generateActionButton</H3>
<PRE>
public <A HREF="../translator/ExtendedActionButton.html" title="class in translator">ExtendedActionButton</A> <B>generateActionButton</B>(java.lang.String&nbsp;key,
                                                 javax.swing.Action&nbsp;theAction)</PRE>
<DL>
<DD>Generate a button encapsulating a predefined Action element
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>key</CODE> - the key for this button<DD><CODE>theAction</CODE> - the action to be encapsulated
<DT><B>Returns:</B><DD>the created object</DL>
</DD>
</DL>
<HR>

<A NAME="generateActionButton(java.lang.String, java.lang.Object[], javax.swing.Action)"><!-- --></A><H3>
generateActionButton</H3>
<PRE>
public <A HREF="../translator/ExtendedActionButton.html" title="class in translator">ExtendedActionButton</A> <B>generateActionButton</B>(java.lang.String&nbsp;key,
                                                 java.lang.Object[]&nbsp;params,
                                                 javax.swing.Action&nbsp;theAction)</PRE>
<DL>
<DD>Generate a button encapsulating a predefined Action element
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>key</CODE> - the key for this button<DD><CODE>params</CODE> - the parameters needed for formatting the text of the button<DD><CODE>theAction</CODE> - the action to be encapsulated
<DT><B>Returns:</B><DD>the created object</DL>
</DD>
</DL>
<HR>

<A NAME="generateJButton(java.lang.String)"><!-- --></A><H3>
generateJButton</H3>
<PRE>
public javax.swing.AbstractButton <B>generateJButton</B>(java.lang.String&nbsp;key)</PRE>
<DL>
<DD>Convenience wrapper for generating a new JButton Internally invokes
 generateJButton(key, null, false)
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>key</CODE> - the key for the JButton
<DT><B>Returns:</B><DD>the generated AbstractButton<DT><B>See Also:</B><DD><A HREF="../translator/TranslatableGUIElement.html#generateJButton(java.lang.String, java.lang.Object[], boolean)"><CODE>generateJButton(String, Object[], boolean)</CODE></A></DL>
</DD>
</DL>
<HR>

<A NAME="generateJButton(java.lang.String, java.lang.Object[], boolean)"><!-- --></A><H3>
generateJButton</H3>
<PRE>
public javax.swing.AbstractButton <B>generateJButton</B>(java.lang.String&nbsp;key,
                                                  java.lang.Object[]&nbsp;params,
                                                  boolean&nbsp;isToggleButton)</PRE>
<DL>
<DD>Method for generating a new JButton
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>key</CODE> - the key for the JButton<DD><CODE>params</CODE> - the objects used for determining the message -- see
          Translator.translateMessage(String, Object[])<DD><CODE>isToggleButton</CODE> - if true, button is toggleable
<DT><B>Returns:</B><DD>the generated AbstractButton<DT><B>See Also:</B><DD><A HREF="../translator/Translator.html#translateMessage(java.lang.String, java.lang.Object[])"><CODE>Translator.translateMessage(String, Object[])</CODE></A></DL>
</DD>
</DL>
<HR>

<A NAME="generateJButton(java.lang.String, java.lang.Object[], boolean, java.awt.event.ActionListener)"><!-- --></A><H3>
generateJButton</H3>
<PRE>
public javax.swing.AbstractButton <B>generateJButton</B>(java.lang.String&nbsp;key,
                                                  java.lang.Object[]&nbsp;params,
                                                  boolean&nbsp;isToggleButton,
                                                  java.awt.event.ActionListener&nbsp;listener)</PRE>
<DL>
<DD>Method for generating a new JButton
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>key</CODE> - the key for the JButton<DD><CODE>params</CODE> - the objects used for determining the message -- see
          Translator.translateMessage(String, Object[])<DD><CODE>isToggleButton</CODE> - if true, button is toggleable<DD><CODE>listener</CODE> - the ActionListener to be registered with the component
<DT><B>Returns:</B><DD>the generated AbstractButton<DT><B>See Also:</B><DD><A HREF="../translator/Translator.html#translateMessage(java.lang.String, java.lang.Object[])"><CODE>Translator.translateMessage(String, Object[])</CODE></A></DL>
</DD>
</DL>
<HR>

<A NAME="generateJButton(java.lang.String, java.lang.Object[], boolean, java.awt.event.ActionListener, boolean)"><!-- --></A><H3>
generateJButton</H3>
<PRE>
public javax.swing.AbstractButton <B>generateJButton</B>(java.lang.String&nbsp;key,
                                                  java.lang.Object[]&nbsp;params,
                                                  boolean&nbsp;isToggleButton,
                                                  java.awt.event.ActionListener&nbsp;listener,
                                                  boolean&nbsp;hideLabel)</PRE>
<DL>
<DD>Method for generating a new JButton
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>key</CODE> - the key for the JButton<DD><CODE>params</CODE> - the objects used for determining the message -- see
          Translator.translateMessage(String, Object[])<DD><CODE>isToggleButton</CODE> - if true, button is toggleable<DD><CODE>listener</CODE> - the ActionListener to be registered with the component<DD><CODE>hideLabel</CODE> - if true, hide the label even if it exists (e.g.,
 for a Toolbar)
<DT><B>Returns:</B><DD>the generated AbstractButton<DT><B>See Also:</B><DD><A HREF="../translator/Translator.html#translateMessage(java.lang.String, java.lang.Object[])"><CODE>Translator.translateMessage(String, Object[])</CODE></A></DL>
</DD>
</DL>
<HR>

<A NAME="generateJCheckBox(java.lang.String)"><!-- --></A><H3>
generateJCheckBox</H3>
<PRE>
public javax.swing.JCheckBox <B>generateJCheckBox</B>(java.lang.String&nbsp;key)</PRE>
<DL>
<DD>Convenience wrapper for generating a new JButton Internally invokes
 generateJButton(key, null, false)
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>key</CODE> - the key for the JButton
<DT><B>Returns:</B><DD>the generated AbstractButton<DT><B>See Also:</B><DD><A HREF="../translator/TranslatableGUIElement.html#generateJButton(java.lang.String, java.lang.Object[], boolean)"><CODE>generateJButton(String, Object[], boolean)</CODE></A></DL>
</DD>
</DL>
<HR>

<A NAME="generateJCheckBox(java.lang.String, java.lang.Object[], java.awt.event.ActionListener)"><!-- --></A><H3>
generateJCheckBox</H3>
<PRE>
public javax.swing.JCheckBox <B>generateJCheckBox</B>(java.lang.String&nbsp;key,
                                               java.lang.Object[]&nbsp;params,
                                               java.awt.event.ActionListener&nbsp;listener)</PRE>
<DL>
<DD>Method for generating a new JCheckBox
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>key</CODE> - the key for the JCheckBox<DD><CODE>params</CODE> - the objects used for determining the message -- see
          Translator.translateMessage(String, Object[])<DD><CODE>listener</CODE> - the ActionListener to be registered with the component
<DT><B>Returns:</B><DD>the generated JCheckBox<DT><B>See Also:</B><DD><A HREF="../translator/Translator.html#translateMessage(java.lang.String, java.lang.Object[])"><CODE>Translator.translateMessage(String, Object[])</CODE></A></DL>
</DD>
</DL>
<HR>

<A NAME="generateJToggleButton(java.lang.String, java.lang.Object[], java.awt.event.ActionListener, boolean)"><!-- --></A><H3>
generateJToggleButton</H3>
<PRE>
public javax.swing.JToggleButton <B>generateJToggleButton</B>(java.lang.String&nbsp;key,
                                                       java.lang.Object[]&nbsp;params,
                                                       java.awt.event.ActionListener&nbsp;listener,
                                                       boolean&nbsp;isRadioButton)</PRE>
<DL>
<DD><DL>
</DL>
</DD>
</DL>
<HR>

<A NAME="generateJComboBox(java.lang.String, java.lang.Object[], java.lang.String[])"><!-- --></A><H3>
generateJComboBox</H3>
<PRE>
public javax.swing.JComboBox <B>generateJComboBox</B>(java.lang.String&nbsp;key,
                                               java.lang.Object[]&nbsp;params,
                                               java.lang.String[]&nbsp;labels)</PRE>
<DL>
<DD>Convenience wrapper for generating a new JComboBox Internally invokes
 generateJComboBox(key, params, labels, labels[0])
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>key</CODE> - the key for the JComboBox<DD><CODE>params</CODE> - the objects used for determining the message -- see
          Translator.translateMessage(String, Object[])<DD><CODE>labels</CODE> - the labels for the JComboBox
<DT><B>Returns:</B><DD>the generated JComboBox<DT><B>See Also:</B><DD><A HREF="../translator/TranslatableGUIElement.html#generateJComboBox(java.lang.String, java.lang.Object[], java.lang.String[], java.lang.String)"><CODE>generateJComboBox(String, Object[], String[], String)</CODE></A>, 
<A HREF="../translator/Translator.html#translateMessage(java.lang.String, java.lang.Object[])"><CODE>Translator.translateMessage(String, Object[])</CODE></A></DL>
</DD>
</DL>
<HR>

<A NAME="generateJComboBox(java.lang.String, java.lang.Object[], java.lang.String[], java.lang.String)"><!-- --></A><H3>
generateJComboBox</H3>
<PRE>
public javax.swing.JComboBox <B>generateJComboBox</B>(java.lang.String&nbsp;key,
                                               java.lang.Object[]&nbsp;params,
                                               java.lang.String[]&nbsp;labels,
                                               java.lang.String&nbsp;selectedItem)</PRE>
<DL>
<DD>Method for generating a new JComboBox
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>key</CODE> - the key for the JComboBox<DD><CODE>params</CODE> - the objects used for determining the message -- see
          Translator.translateMessage(String, Object[])<DD><CODE>labels</CODE> - the labels for the JComboBox<DD><CODE>selectedItem</CODE> - the default item
<DT><B>Returns:</B><DD>the generated JComboBox<DT><B>See Also:</B><DD><A HREF="../translator/Translator.html#translateMessage(java.lang.String, java.lang.Object[])"><CODE>Translator.translateMessage(String, Object[])</CODE></A></DL>
</DD>
</DL>
<HR>

<A NAME="generateJPopupMenu(java.lang.String)"><!-- --></A><H3>
generateJPopupMenu</H3>
<PRE>
public javax.swing.JPopupMenu <B>generateJPopupMenu</B>(java.lang.String&nbsp;key)</PRE>
<DL>
<DD>Method for generating a new JPopupMenu
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>key</CODE> - the key for the JPopupMenu
<DT><B>Returns:</B><DD>the generated JPopupMenu</DL>
</DD>
</DL>
<HR>

<A NAME="generateJFrame(java.lang.String)"><!-- --></A><H3>
generateJFrame</H3>
<PRE>
public javax.swing.JFrame <B>generateJFrame</B>(java.lang.String&nbsp;key)</PRE>
<DL>
<DD>Method for generating a new JFrame
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>key</CODE> - the key for the JFrame
<DT><B>Returns:</B><DD>the generated JFrame</DL>
</DD>
</DL>
<HR>

<A NAME="generateJLabel(java.lang.String)"><!-- --></A><H3>
generateJLabel</H3>
<PRE>
public javax.swing.JLabel <B>generateJLabel</B>(java.lang.String&nbsp;key)</PRE>
<DL>
<DD>Convenience wrapper for generating a new JLabel Internally invokes
 generateJLabel(key, null)
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>key</CODE> - the key for the JLabel
<DT><B>Returns:</B><DD>the generated JLabel<DT><B>See Also:</B><DD><A HREF="../translator/TranslatableGUIElement.html#generateJLabel(java.lang.String, java.lang.Object[])"><CODE>generateJLabel(String, Object[])</CODE></A></DL>
</DD>
</DL>
<HR>

<A NAME="generateJLabel(java.lang.String, java.lang.Object[])"><!-- --></A><H3>
generateJLabel</H3>
<PRE>
public javax.swing.JLabel <B>generateJLabel</B>(java.lang.String&nbsp;key,
                                         java.lang.Object[]&nbsp;params)</PRE>
<DL>
<DD>Method for generating a new JLabel
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>key</CODE> - the key for the JLabel<DD><CODE>params</CODE> - the objects used for determining the message -- see
          Translator.translateMessage(String, Object[])
<DT><B>Returns:</B><DD>the generated JLabel<DT><B>See Also:</B><DD><A HREF="../translator/Translator.html#translateMessage(java.lang.String, java.lang.Object[])"><CODE>Translator.translateMessage(String, Object[])</CODE></A></DL>
</DD>
</DL>
<HR>

<A NAME="generateJList(java.lang.String, java.lang.Object[], java.lang.Object[], int, javax.swing.event.ListSelectionListener, int)"><!-- --></A><H3>
generateJList</H3>
<PRE>
public javax.swing.JList <B>generateJList</B>(java.lang.String&nbsp;key,
                                       java.lang.Object[]&nbsp;params,
                                       java.lang.Object[]&nbsp;labels,
                                       int&nbsp;selectionMode,
                                       javax.swing.event.ListSelectionListener&nbsp;listener,
                                       int&nbsp;selectedIndex)</PRE>
<DL>
<DD>Method for generating a new JList
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>key</CODE> - the key for the JList<DD><CODE>params</CODE> - the objects used for determining the message -- see
          Translator.translateMessage(String, Object[])<DD><CODE>labels</CODE> - the labels for the JComboBox<DD><CODE>selectionMode</CODE> - the selection mode for the list<DD><CODE>listener</CODE> - the ListSelectionListener for the events<DD><CODE>selectedIndex</CODE> - the index of the default item
<DT><B>Returns:</B><DD>the generated JList<DT><B>See Also:</B><DD><A HREF="../translator/Translator.html#translateMessage(java.lang.String, java.lang.Object[])"><CODE>Translator.translateMessage(String, Object[])</CODE></A></DL>
</DD>
</DL>
<HR>

<A NAME="generateJMenu(java.lang.String)"><!-- --></A><H3>
generateJMenu</H3>
<PRE>
public javax.swing.JMenu <B>generateJMenu</B>(java.lang.String&nbsp;key)</PRE>
<DL>
<DD>Convenience wrapper for generating a new JMenu Internally invokes
 generateJMenu(key, null)
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>key</CODE> - the key for the JMenu
<DT><B>Returns:</B><DD>the generated JMenu<DT><B>See Also:</B><DD><A HREF="../translator/TranslatableGUIElement.html#generateJMenu(java.lang.String, java.lang.Object[])"><CODE>generateJMenu(String, Object[])</CODE></A></DL>
</DD>
</DL>
<HR>

<A NAME="generateJMenu(java.lang.String, java.lang.Object[])"><!-- --></A><H3>
generateJMenu</H3>
<PRE>
public javax.swing.JMenu <B>generateJMenu</B>(java.lang.String&nbsp;key,
                                       java.lang.Object[]&nbsp;params)</PRE>
<DL>
<DD>Method for generating a new JMenu
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>key</CODE> - the key for the JMenu<DD><CODE>params</CODE> - the objects used for determining the message -- see
          Translator.translateMessage(String, Object[])
<DT><B>Returns:</B><DD>the generated JMenu<DT><B>See Also:</B><DD><A HREF="../translator/Translator.html#translateMessage(java.lang.String, java.lang.Object[])"><CODE>Translator.translateMessage(String, Object[])</CODE></A></DL>
</DD>
</DL>
<HR>

<A NAME="generateJMenuItem(java.lang.String)"><!-- --></A><H3>
generateJMenuItem</H3>
<PRE>
public javax.swing.JMenuItem <B>generateJMenuItem</B>(java.lang.String&nbsp;key)</PRE>
<DL>
<DD>Convenience wrapper for generating a new JMenuItem Internally invokes
 generateJMenuItem(key, null)
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>key</CODE> - the key for the JMenuItem
<DT><B>Returns:</B><DD>the generated JMenuItem<DT><B>See Also:</B><DD><A HREF="../translator/TranslatableGUIElement.html#generateJMenuItem(java.lang.String, java.lang.Object[])"><CODE>generateJMenuItem(String, Object[])</CODE></A></DL>
</DD>
</DL>
<HR>

<A NAME="generateJMenuItem(java.lang.String, boolean)"><!-- --></A><H3>
generateJMenuItem</H3>
<PRE>
public javax.swing.JMenuItem <B>generateJMenuItem</B>(java.lang.String&nbsp;key,
                                               boolean&nbsp;useIcon)</PRE>
<DL>
<DD>Convenience wrapper for generating a new JMenuItem Internally invokes
 generateJMenuItem(key, null)
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>key</CODE> - the key for the JMenuItem<DD><CODE>useIcon</CODE> - if true, show an associated icon
<DT><B>Returns:</B><DD>the generated JMenuItem<DT><B>See Also:</B><DD><A HREF="../translator/TranslatableGUIElement.html#generateJMenuItem(java.lang.String, java.lang.Object[])"><CODE>generateJMenuItem(String, Object[])</CODE></A></DL>
</DD>
</DL>
<HR>

<A NAME="generateJMenuItem(java.lang.String, java.lang.Object[])"><!-- --></A><H3>
generateJMenuItem</H3>
<PRE>
public javax.swing.JMenuItem <B>generateJMenuItem</B>(java.lang.String&nbsp;key,
                                               java.lang.Object[]&nbsp;params)</PRE>
<DL>
<DD>Method for generating a new JMenuItem
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>key</CODE> - the key for the JMenuItem<DD><CODE>params</CODE> - the objects used for determining the message -- see
          Translator.translateMessage(String, Object[])
<DT><B>Returns:</B><DD>the generated JMenuItem<DT><B>See Also:</B><DD><A HREF="../translator/Translator.html#translateMessage(java.lang.String, java.lang.Object[])"><CODE>Translator.translateMessage(String, Object[])</CODE></A></DL>
</DD>
</DL>
<HR>

<A NAME="generateJMenuItem(java.lang.String, java.lang.Object[], boolean)"><!-- --></A><H3>
generateJMenuItem</H3>
<PRE>
public javax.swing.JMenuItem <B>generateJMenuItem</B>(java.lang.String&nbsp;key,
                                               java.lang.Object[]&nbsp;params,
                                               boolean&nbsp;useIcon)</PRE>
<DL>
<DD>Method for generating a new JMenuItem
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>key</CODE> - the key for the JMenuItem<DD><CODE>params</CODE> - the objects used for determining the message -- see
          Translator.translateMessage(String, Object[])<DD><CODE>useIcon</CODE> - if true, show an associated icon
<DT><B>Returns:</B><DD>the generated JMenuItem<DT><B>See Also:</B><DD><A HREF="../translator/Translator.html#translateMessage(java.lang.String, java.lang.Object[])"><CODE>Translator.translateMessage(String, Object[])</CODE></A></DL>
</DD>
</DL>
<HR>

<A NAME="generateBorderedJPanel(java.lang.String)"><!-- --></A><H3>
generateBorderedJPanel</H3>
<PRE>
public javax.swing.JPanel <B>generateBorderedJPanel</B>(java.lang.String&nbsp;key)</PRE>
<DL>
<DD>Generates a bordered JPanel with the proper label
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>key</CODE> - the key for looking up the title of the bordered panel
<DT><B>Returns:</B><DD>a bordered JPanel with the proper title</DL>
</DD>
</DL>
<HR>

<A NAME="generateBorderedJPanel(java.lang.String, java.lang.Object[])"><!-- --></A><H3>
generateBorderedJPanel</H3>
<PRE>
public javax.swing.JPanel <B>generateBorderedJPanel</B>(java.lang.String&nbsp;key,
                                                 java.lang.Object[]&nbsp;params)</PRE>
<DL>
<DD>Generates a bordered JPanel with the proper label
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>key</CODE> - the key for looking up the title of the bordered panel<DD><CODE>params</CODE> - optional parameters (may be null) for defining the title
<DT><B>Returns:</B><DD>a bordered JPanel with the proper title</DL>
</DD>
</DL>
<HR>

<A NAME="generateTitledBorder(java.lang.String)"><!-- --></A><H3>
generateTitledBorder</H3>
<PRE>
public javax.swing.border.Border <B>generateTitledBorder</B>(java.lang.String&nbsp;key)</PRE>
<DL>
<DD><DL>
</DL>
</DD>
</DL>
<HR>

<A NAME="generateBorder(java.lang.String, java.lang.Object[])"><!-- --></A><H3>
generateBorder</H3>
<PRE>
public javax.swing.border.Border <B>generateBorder</B>(java.lang.String&nbsp;key,
                                                java.lang.Object[]&nbsp;params)</PRE>
<DL>
<DD><DL>
</DL>
</DD>
</DL>
<HR>

<A NAME="generateBorderedBox(int, java.lang.String)"><!-- --></A><H3>
generateBorderedBox</H3>
<PRE>
public javax.swing.Box <B>generateBorderedBox</B>(int&nbsp;alignment,
                                           java.lang.String&nbsp;key)</PRE>
<DL>
<DD>Generates a bordered JPanel with the proper label
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>key</CODE> - the key for looking up the title of the bordered panel
<DT><B>Returns:</B><DD>a bordered JPanel with the proper title</DL>
</DD>
</DL>
<HR>

<A NAME="generateBorderedBox(int, java.lang.String, java.lang.Object[])"><!-- --></A><H3>
generateBorderedBox</H3>
<PRE>
public javax.swing.Box <B>generateBorderedBox</B>(int&nbsp;alignment,
                                           java.lang.String&nbsp;key,
                                           java.lang.Object[]&nbsp;params)</PRE>
<DL>
<DD>Generates a bordered JPanel with the proper label
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>key</CODE> - the key for looking up the title of the bordered panel<DD><CODE>params</CODE> - optional parameters (may be null) for defining the title
<DT><B>Returns:</B><DD>a bordered JPanel with the proper title</DL>
</DD>
</DL>
<HR>

<A NAME="generateJSlider(java.lang.String, java.lang.Object[], int, int, javax.swing.event.ChangeListener)"><!-- --></A><H3>
generateJSlider</H3>
<PRE>
public javax.swing.JSlider <B>generateJSlider</B>(java.lang.String&nbsp;key,
                                           java.lang.Object[]&nbsp;params,
                                           int&nbsp;min,
                                           int&nbsp;max,
                                           javax.swing.event.ChangeListener&nbsp;listener)</PRE>
<DL>
<DD>Convenience wrapper for generating a new JSlider Internally invokes
 generateJSlider(key, params, min, max, min, (max-min)/5, (max-min)/20,
 false, listener)
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>key</CODE> - the key for the JSlider<DD><CODE>params</CODE> - the objects used for determining the message -- see
          Translator.translateMessage(String, Object[])<DD><CODE>min</CODE> - the minimum value for the JSlider<DD><CODE>max</CODE> - the maximum value for the JSlider<DD><CODE>listener</CODE> - the ChangeListener for the JSlider
<DT><B>Returns:</B><DD>the generated JSlider<DT><B>See Also:</B><DD><A HREF="../translator/TranslatableGUIElement.html#generateJSlider(java.lang.String, java.lang.Object[], int, int, int, int, int, boolean, javax.swing.event.ChangeListener)"><CODE>generateJSlider(String, Object[], int, int, int, int, int, boolean,
      ChangeListener)</CODE></A>, 
<A HREF="../translator/Translator.html#translateMessage(java.lang.String, java.lang.Object[])"><CODE>Translator.translateMessage(String, Object[])</CODE></A></DL>
</DD>
</DL>
<HR>

<A NAME="generateJSlider(java.lang.String, java.lang.Object[], int, int, int, boolean, javax.swing.event.ChangeListener)"><!-- --></A><H3>
generateJSlider</H3>
<PRE>
public javax.swing.JSlider <B>generateJSlider</B>(java.lang.String&nbsp;key,
                                           java.lang.Object[]&nbsp;params,
                                           int&nbsp;min,
                                           int&nbsp;max,
                                           int&nbsp;defaultValue,
                                           boolean&nbsp;snapMode,
                                           javax.swing.event.ChangeListener&nbsp;listener)</PRE>
<DL>
<DD>Convenience wrapper for generating a new JSlider Internally invokes
 generateJSlider(key, params, min, max, defaultValue, (max-min)/5,
 (max-min)/20, false, listener)
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>key</CODE> - the key for the JSlider<DD><CODE>params</CODE> - the objects used for determining the message -- see
          Translator.translateMessage(String, Object[])<DD><CODE>min</CODE> - the minimum value for the JSlider<DD><CODE>max</CODE> - the maximum value for the JSlider<DD><CODE>defaultValue</CODE> - the default value for the JSlider<DD><CODE>snapMode</CODE> - determines if the "snap" is on: user can only select ticks<DD><CODE>listener</CODE> - the ChangeListener for the JSlider
<DT><B>Returns:</B><DD>the generated JSlider<DT><B>See Also:</B><DD><A HREF="../translator/TranslatableGUIElement.html#generateJSlider(java.lang.String, java.lang.Object[], int, int, int, int, int, boolean, javax.swing.event.ChangeListener)"><CODE>generateJSlider(String, Object[], int, int, int, int, int, boolean,
      ChangeListener)</CODE></A>, 
<A HREF="../translator/Translator.html#translateMessage(java.lang.String, java.lang.Object[])"><CODE>Translator.translateMessage(String, Object[])</CODE></A></DL>
</DD>
</DL>
<HR>

<A NAME="generateJSlider(java.lang.String, java.lang.Object[], int, int, int, int, int, boolean, javax.swing.event.ChangeListener)"><!-- --></A><H3>
generateJSlider</H3>
<PRE>
public javax.swing.JSlider <B>generateJSlider</B>(java.lang.String&nbsp;key,
                                           java.lang.Object[]&nbsp;params,
                                           int&nbsp;min,
                                           int&nbsp;max,
                                           int&nbsp;defaultValue,
                                           int&nbsp;majorSpacing,
                                           int&nbsp;minorSpacing,
                                           boolean&nbsp;snapMode,
                                           javax.swing.event.ChangeListener&nbsp;listener)</PRE>
<DL>
<DD>Method for generating a new JSlider
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>key</CODE> - the key for the JSlider<DD><CODE>params</CODE> - the objects used for determining the message -- see
          Translator.translateMessage(String, Object[])<DD><CODE>min</CODE> - the minimum value for the JSlider<DD><CODE>max</CODE> - the maximum value for the JSlider<DD><CODE>defaultValue</CODE> - the default value for the JSlider<DD><CODE>majorSpacing</CODE> - the spacing for 'major' ticks<DD><CODE>minorSpacing</CODE> - the spacing for 'minor' ticks<DD><CODE>snapMode</CODE> - determines if the "snap" is on: user can only select ticks<DD><CODE>listener</CODE> - the ChangeListener for the JSlider
<DT><B>Returns:</B><DD>the generated JSlider<DT><B>See Also:</B><DD><A HREF="../translator/Translator.html#translateMessage(java.lang.String, java.lang.Object[])"><CODE>Translator.translateMessage(String, Object[])</CODE></A></DL>
</DD>
</DL>
<HR>

<A NAME="generateJTextField(java.lang.String, java.lang.Object[], int, java.lang.String)"><!-- --></A><H3>
generateJTextField</H3>
<PRE>
public javax.swing.JTextField <B>generateJTextField</B>(java.lang.String&nbsp;key,
                                                 java.lang.Object[]&nbsp;params,
                                                 int&nbsp;width,
                                                 java.lang.String&nbsp;defaultText)</PRE>
<DL>
<DD>Method for generating a new JTextField
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>key</CODE> - the key for the JTextField<DD><CODE>params</CODE> - the objects used for determining the message -- see
          Translator.translateMessage(String, Object[])<DD><CODE>width</CODE> - the width of the text field<DD><CODE>defaultText</CODE> - the default text
<DT><B>Returns:</B><DD>the generated JTextField<DT><B>See Also:</B><DD><A HREF="../translator/Translator.html#translateMessage(java.lang.String, java.lang.Object[])"><CODE>Translator.translateMessage(String, Object[])</CODE></A></DL>
</DD>
</DL>
<HR>

<A NAME="insertTranslatableTab(java.lang.String, java.awt.Component, javax.swing.JTabbedPane)"><!-- --></A><H3>
insertTranslatableTab</H3>
<PRE>
public void <B>insertTranslatableTab</B>(java.lang.String&nbsp;tabKey,
                                  java.awt.Component&nbsp;component,
                                  javax.swing.JTabbedPane&nbsp;tabbedPane)</PRE>
<DL>
<DD><DL>
</DL>
</DD>
</DL>
<HR>

<A NAME="insertTranslatableTab(java.lang.String, java.lang.Object[], java.awt.Component, javax.swing.JTabbedPane)"><!-- --></A><H3>
insertTranslatableTab</H3>
<PRE>
public void <B>insertTranslatableTab</B>(java.lang.String&nbsp;tabKey,
                                  java.lang.Object[]&nbsp;params,
                                  java.awt.Component&nbsp;component,
                                  javax.swing.JTabbedPane&nbsp;tabbedPane)</PRE>
<DL>
<DD><DL>
</DL>
</DD>
</DL>
<HR>

<A NAME="generateToggleableJMenuItem(java.lang.String, java.lang.Object[], boolean)"><!-- --></A><H3>
generateToggleableJMenuItem</H3>
<PRE>
public javax.swing.JMenuItem <B>generateToggleableJMenuItem</B>(java.lang.String&nbsp;key,
                                                         java.lang.Object[]&nbsp;params,
                                                         boolean&nbsp;isCheckBox)</PRE>
<DL>
<DD>Convenience wrapper for generating a new toggleable JMenuItem Internally
 invokes generateToggleableJMenuItem(key, params, isCheckBox, false)
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>key</CODE> - the key for the JMenuItem<DD><CODE>params</CODE> - the objects used for determining the message -- see
          Translator.translateMessage(String, Object[])<DD><CODE>isCheckBox</CODE> - if true, use Checkbox semantics, otherwise use radio button
          semantics
<DT><B>Returns:</B><DD>the generated JMenuItem<DT><B>See Also:</B><DD><A HREF="../translator/TranslatableGUIElement.html#generateToggleableJMenuItem(java.lang.String, java.lang.Object[], boolean, boolean)"><CODE>generateToggleableJMenuItem(String, Object[], boolean, boolean)</CODE></A></DL>
</DD>
</DL>
<HR>

<A NAME="generateToggleableJMenuItem(java.lang.String, java.lang.Object[], boolean, boolean)"><!-- --></A><H3>
generateToggleableJMenuItem</H3>
<PRE>
public javax.swing.JMenuItem <B>generateToggleableJMenuItem</B>(java.lang.String&nbsp;key,
                                                         java.lang.Object[]&nbsp;params,
                                                         boolean&nbsp;isCheckBox,
                                                         boolean&nbsp;isSelected)</PRE>
<DL>
<DD>Method for generating a new toggleable JMenuItem
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>key</CODE> - the key for the JMenuItem<DD><CODE>params</CODE> - the objects used for determining the message -- see
          Translator.translateMessage(String, Object[])<DD><CODE>isCheckBox</CODE> - if true, use Checkbox semantics, otherwise use radio button
          semantics<DD><CODE>isSelected</CODE> - if true, mark as selected.
<DT><B>Returns:</B><DD>the generated JMenuItem</DL>
</DD>
</DL>
<HR>

<A NAME="insertToMenu(java.lang.String, java.lang.Object[], java.lang.Object, java.lang.Object[], javax.swing.JMenu)"><!-- --></A><H3>
insertToMenu</H3>
<PRE>
public javax.swing.AbstractButton <B>insertToMenu</B>(java.lang.String&nbsp;key,
                                               java.lang.Object[]&nbsp;params,
                                               java.lang.Object&nbsp;invocationTargetObject,
                                               java.lang.Object[]&nbsp;args,
                                               javax.swing.JMenu&nbsp;menu)</PRE>
<DL>
<DD>Convenience method for adding a new element to a menu Internally invokes
 insertMenuToolBar(key, params, invocationTargetObject, args, menu, null)
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>key</CODE> - the key for the element<DD><CODE>params</CODE> - the objects used for determining the message -- see
          Translator.translateMessage(String, Object[])<DD><CODE>invocationTargetObject</CODE> - the object on which the method defined in the resource file is to
          be executed<DD><CODE>args</CODE> - the arguments for the method call<DD><CODE>menu</CODE> - the JMenu to which the element is to be added
<DT><B>Returns:</B><DD>the generated AbtractButton<DT><B>See Also:</B><DD><A HREF="../translator/Translator.html#translateMessage(java.lang.String, java.lang.Object[])"><CODE>Translator.translateMessage(String, Object[])</CODE></A></DL>
</DD>
</DL>
<HR>

<A NAME="insertToPopupMenu(java.lang.String, java.lang.Object[], java.lang.Object, java.lang.Object[], javax.swing.JPopupMenu)"><!-- --></A><H3>
insertToPopupMenu</H3>
<PRE>
public javax.swing.AbstractButton <B>insertToPopupMenu</B>(java.lang.String&nbsp;key,
                                                    java.lang.Object[]&nbsp;params,
                                                    java.lang.Object&nbsp;invocationTargetObject,
                                                    java.lang.Object[]&nbsp;args,
                                                    javax.swing.JPopupMenu&nbsp;menu)</PRE>
<DL>
<DD>Convenience method for adding a new element to a popup menu Internally
 invokes insertMenuToolBar(key, params, invocationTargetObject, args, menu,
 null)
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>key</CODE> - the key for the element<DD><CODE>params</CODE> - the objects used for determining the message -- see
          Translator.translateMessage(String, Object[])<DD><CODE>invocationTargetObject</CODE> - the object on which the method defined in the resource file is to
          be executed<DD><CODE>args</CODE> - the arguments for the method call<DD><CODE>menu</CODE> - the JPopupMenu to which the element is to be added
<DT><B>Returns:</B><DD>the generated AbstractButton<DT><B>See Also:</B><DD><A HREF="../translator/Translator.html#translateMessage(java.lang.String, java.lang.Object[])"><CODE>Translator.translateMessage(String, Object[])</CODE></A></DL>
</DD>
</DL>
<HR>

<A NAME="insertToToolBar(java.lang.String, java.lang.Object[], java.lang.Object, java.lang.Object[], javax.swing.JToolBar)"><!-- --></A><H3>
insertToToolBar</H3>
<PRE>
public javax.swing.AbstractButton <B>insertToToolBar</B>(java.lang.String&nbsp;key,
                                                  java.lang.Object[]&nbsp;params,
                                                  java.lang.Object&nbsp;invocationTargetObject,
                                                  java.lang.Object[]&nbsp;args,
                                                  javax.swing.JToolBar&nbsp;toolBar)</PRE>
<DL>
<DD>Convenience method for adding a new element to a toolbar Internally invokes
 insertMenuToolBar(key, params, invocationTargetObject, args, null, toolBar)
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>key</CODE> - the key for the element<DD><CODE>params</CODE> - the objects used for determining the message -- see
          Translator.translateMessage(String, Object[])<DD><CODE>invocationTargetObject</CODE> - the object on which the method defined in the resource file is to
          be executed<DD><CODE>args</CODE> - the arguments for the method call<DD><CODE>toolBar</CODE> - the JToolBar to which the element is to be added
<DT><B>Returns:</B><DD>the generated AbstractButton<DT><B>See Also:</B><DD><A HREF="../translator/Translator.html#translateMessage(java.lang.String, java.lang.Object[])"><CODE>Translator.translateMessage(String, Object[])</CODE></A></DL>
</DD>
</DL>
<HR>

<A NAME="insertToMenuAndToolBar(java.lang.String, java.lang.Object[], java.lang.Object, java.lang.Object[], javax.swing.JMenu, javax.swing.JToolBar)"><!-- --></A><H3>
insertToMenuAndToolBar</H3>
<PRE>
public javax.swing.AbstractButton <B>insertToMenuAndToolBar</B>(java.lang.String&nbsp;key,
                                                         java.lang.Object[]&nbsp;params,
                                                         java.lang.Object&nbsp;invocationTargetObject,
                                                         java.lang.Object[]&nbsp;args,
                                                         javax.swing.JMenu&nbsp;menu,
                                                         javax.swing.JToolBar&nbsp;toolBar)</PRE>
<DL>
<DD>Convenience method for adding a new element to a menu and toolbar
 Internally invokes insertMenuToolBar(key, params, invocationTargetObject,
 args, menu, toolBar)
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>key</CODE> - the key for the element<DD><CODE>params</CODE> - the objects used for determining the message -- see
          Translator.translateMessage(String, Object[])<DD><CODE>invocationTargetObject</CODE> - the object on which the method defined in the resource file is to
          be executed<DD><CODE>args</CODE> - the arguments for the method call<DD><CODE>menu</CODE> - the JMenu to which the element is to be added<DD><CODE>toolBar</CODE> - the JToolBar to which the element is to be added
<DT><B>Returns:</B><DD>the generated AbstractButton<DT><B>See Also:</B><DD><A HREF="../translator/Translator.html#translateMessage(java.lang.String, java.lang.Object[])"><CODE>Translator.translateMessage(String, Object[])</CODE></A></DL>
</DD>
</DL>
<HR>

<A NAME="insertToMenuAndToolBar(java.lang.String, java.lang.Object[], java.lang.Object, java.lang.Object[], javax.swing.JPopupMenu, javax.swing.JToolBar)"><!-- --></A><H3>
insertToMenuAndToolBar</H3>
<PRE>
public javax.swing.AbstractButton <B>insertToMenuAndToolBar</B>(java.lang.String&nbsp;key,
                                                         java.lang.Object[]&nbsp;params,
                                                         java.lang.Object&nbsp;invocationTargetObject,
                                                         java.lang.Object[]&nbsp;args,
                                                         javax.swing.JPopupMenu&nbsp;menu,
                                                         javax.swing.JToolBar&nbsp;toolBar)</PRE>
<DL>
<DD>Convenience method for adding a new element to a popup menu and toolbar
 Internally invokes insertMenuToolBar(key, params, invocationTargetObject,
 args, menu, toolBar)
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>key</CODE> - the key for the element<DD><CODE>params</CODE> - the objects used for determining the message -- see
          Translator.translateMessage(String, Object[])<DD><CODE>invocationTargetObject</CODE> - the object on which the method defined in the resource file is to
          be executed<DD><CODE>args</CODE> - the arguments for the method call<DD><CODE>menu</CODE> - the JPopupMenu to which the element is to be added<DD><CODE>toolBar</CODE> - the JToolBar to which the element is to be added
<DT><B>Returns:</B><DD>the generated AbstractButton<DT><B>See Also:</B><DD><A HREF="../translator/Translator.html#translateMessage(java.lang.String, java.lang.Object[])"><CODE>Translator.translateMessage(String, Object[])</CODE></A></DL>
</DD>
</DL>
<HR>

<A NAME="unregisterComponent(java.lang.String, java.awt.Component)"><!-- --></A><H3>
unregisterComponent</H3>
<PRE>
public void <B>unregisterComponent</B>(java.lang.String&nbsp;key,
                                java.awt.Component&nbsp;component)</PRE>
<DL>
<DD><DL>
</DL>
</DD>
</DL>
<HR>

<A NAME="translateGUIElements()"><!-- --></A><H3>
translateGUIElements</H3>
<PRE>
public void <B>translateGUIElements</B>()</PRE>
<DL>
<DD>Translate all registered components using the resource file
<P>
<DD><DL>
</DL>
</DD>
</DL>
<!-- ========= END OF CLASS DATA ========= -->
<HR>


<!-- ======= START OF BOTTOM NAVBAR ====== -->
<A NAME="navbar_bottom"><!-- --></A>
<A HREF="#skip-navbar_bottom" title="Skip navigation links"></A>
<TABLE BORDER="0" WIDTH="100%" CELLPADDING="1" CELLSPACING="0" SUMMARY="">
<TR>
<TD COLSPAN=2 BGCOLOR="#EEEEFF" CLASS="NavBarCell1">
<A NAME="navbar_bottom_firstrow"><!-- --></A>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="3" SUMMARY="">
  <TR ALIGN="center" VALIGN="top">
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../translator/package-summary.html"><FONT CLASS="NavBarFont1"><B>Package</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#FFFFFF" CLASS="NavBarCell1Rev"> &nbsp;<FONT CLASS="NavBarFont1Rev"><B>Class</B></FONT>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="class-use/TranslatableGUIElement.html"><FONT CLASS="NavBarFont1"><B>Use</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="package-tree.html"><FONT CLASS="NavBarFont1"><B>Tree</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../deprecated-list.html"><FONT CLASS="NavBarFont1"><B>Deprecated</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../index-files/index-1.html"><FONT CLASS="NavBarFont1"><B>Index</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../help-doc.html"><FONT CLASS="NavBarFont1"><B>Help</B></FONT></A>&nbsp;</TD>
  </TR>
</TABLE>
</TD>
<TD ALIGN="right" VALIGN="top" ROWSPAN=3><EM>
</EM>
</TD>
</TR>

<TR>
<TD BGCOLOR="white" CLASS="NavBarCell2"><FONT SIZE="-2">
&nbsp;<A HREF="../translator/StaticExtendedResourceBundle.html" title="class in translator"><B>PREV CLASS</B></A>&nbsp;
&nbsp;<A HREF="../translator/Translator.html" title="class in translator"><B>NEXT CLASS</B></A></FONT></TD>
<TD BGCOLOR="white" CLASS="NavBarCell2"><FONT SIZE="-2">
  <A HREF="../index.html?translator/TranslatableGUIElement.html" target="_top"><B>FRAMES</B></A>  &nbsp;
&nbsp;<A HREF="TranslatableGUIElement.html" target="_top"><B>NO FRAMES</B></A>  &nbsp;
&nbsp;<SCRIPT type="text/javascript">
  <!--
  if(window==top) {
    document.writeln('<A HREF="../allclasses-noframe.html"><B>All Classes</B></A>');
  }
  //-->
</SCRIPT>
<NOSCRIPT>
  <A HREF="../allclasses-noframe.html"><B>All Classes</B></A>
</NOSCRIPT>


</FONT></TD>
</TR>
<TR>
<TD VALIGN="top" CLASS="NavBarCell3"><FONT SIZE="-2">
  SUMMARY:&nbsp;NESTED&nbsp;|&nbsp;FIELD&nbsp;|&nbsp;<A HREF="#constructor_summary">CONSTR</A>&nbsp;|&nbsp;<A HREF="#method_summary">METHOD</A></FONT></TD>
<TD VALIGN="top" CLASS="NavBarCell3"><FONT SIZE="-2">
DETAIL:&nbsp;FIELD&nbsp;|&nbsp;<A HREF="#constructor_detail">CONSTR</A>&nbsp;|&nbsp;<A HREF="#method_detail">METHOD</A></FONT></TD>
</TR>
</TABLE>
<A NAME="skip-navbar_bottom"></A>
<!-- ======== END OF BOTTOM NAVBAR ======= -->

<HR>

</BODY>
</HTML>
